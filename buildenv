#!/usr/bin/env python

# This script is meant to check my home directory to ensure that all the various
# symlinks that make up my environment are there.  Its purpose is to sort of
# "audit" a given system to ensure everything is setup the way it should be.

# Note that the convention I use is that the symlink is the same name as the
# file in this repository, but with a "." prepended.  And the symlinks are
# relative
#
# i.e. ${HOME}/.bashrc -> ${ENV_ROOT}/dotfiles/bashrc

import os
import sys
import re

from optparse import OptionParser

REPO_T = 0
FILE_T = 1

LINKS = (
    # src   target
    (REPO_T, "{env}/dotfiles", 		                 ".dotfiles"),
    (REPO_T, "{env}/vim",         	                 ".vim"),
    (REPO_T, "{env}/sbin",         	                 "sbin"),
    (FILE_T, "{dotfiles}/zshrc",                     ".zshrc"),
    (FILE_T, "{dotfiles}/tmux.conf",                 ".tmux.conf"),
    (FILE_T, "{vim}/vimrc",                          ".vimrc"),
)

def main():
    p = OptionParser()
    p.add_option("-u", "--update", dest="update",
                 action="store_true", help="Update symlinks")
    (opts, args) = p.parse_args()

    env_root = os.environ['ENV_ROOT']
    home = os.environ['HOME']
    home = home if home.endswith('/') else home + '/'
    relative_env_root = re.sub(home, "", env_root)
    os.chdir(home)

    for link_type, src, target in LINKS:
        if link_type == REPO_T:
            link_type_str = "Repo"
            src = src.format(env=relative_env_root)
            # Set the variable to the value of target
            # i.e. set the variable 'dotfiles' to the value '.dotfiles'
            # This is necessary for validating the other links below
            globals()[target[1:]] = target
        else:
            link_type_str = "File"
            src = src.format(dotfiles=dotfiles, vim=vim)

            # prepend ../ for each additional component in target
            # i.e. .xmonad/xmonad.hs should point to ../.dotfiles/xmonad.hs, not .dotfiles/xmonad.hs
            if os.path.dirname(target) != "":
                for component in os.path.split(target)[:-1]:
                    src = "../{s}".format(s=src)

        if os.path.exists(target):
            actual_src = os.readlink("%s/%s" % (home, target))
            if actual_src != src:
                print "%s symlink incorrect: %s -> %s, should be: %s" % (link_type_str, target, actual_src, src)
                if opts.update:
                    print "Fixing ... %s -> %s" % (target, src)
                    os.unlink(target)
                    os.symlink(src, target)
        else:
            if opts.update:
                print "Creating ... %s -> %s" % (target, src)
                os.symlink(src, target)
            else:
                print "%s symlink does not exist: %s" % (link_type_str, target)

if __name__ == "__main__":
    main()
