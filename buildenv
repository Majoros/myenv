#!/usr/bin/python2.7

"""
This script is meant to check my home directory to ensure that all the various
symlinks that make up my environment are there.  Its purpose is to sort of
"audit" a given system to ensure everything is setup the way it should be.

Note that the convention I use is that the symlink is the same name as the
file in this repository, but with a "." prepended.  And the symlinks are
relative

i.e. ${HOME}/.bashrc -> ${ENV_ROOT}/dotfiles/bashrc
"""

import os
import sys
import re
import urllib.request

from optparse import OptionParser



class BuildEnv:

    LINK_T = 0
    DIR_T = 1
    DOWNLOAD_T = 2

    def __init__( self,
        data,
        replace = dict(),
        update = False,
        home = os.environ['HOME']):

        self.update = update
        self.data = data
        self.replace = replace
        self.home = home if home.endswith('/') else home + '/'

        self.dispatch = {
            self.LINK_T: BuildEnv._create_symlink,
            self.DIR_T: BuildEnv._create_dir,
            self.DOWNLOAD_T: BuildEnv._download_file,
        }

        os.chdir(home)

    def build(self):
        for link_type, src, target in self.data:
            src = src.format(**self.replace)

            self.dispatch[link_type](self,
                    src,
                    target)

    def _create_dir( self, src, mode):
        if os.path.isdir(src):
            if self.update:
                #print "Updating mode of %s" % (src)
                os.chmod(src, mode)
        else:
            if self.update:
                print("Creating dir {0}".format(src))
                os.makedirs(src, int(mode))
            else:
                print("Directory {0} is missing".format(src))

    def _create_symlink( self, src, target):
        if os.path.exists(target):
            actual_src = os.readlink(os.path.join(self.home, target))
            if actual_src != src:
                print("Symlink incorrect: {0} -> {1}, should be: {2}".format(
                        target,
                        actual_src,
                        src))
                if self.update:
                    print("Fixing ... {0} -> {1}".format(target, src))
                    os.unlink(target)
                    os.symlink(src, target)
        else:
            if self.update:
                print("Creating ... {0} -> {1}".format(target, src))
                os.symlink(src, target)
            else:
                print("{0} symlink does not exist: {1}".format(src, target))

    def _download_file(self, file, url):

        dir = os.path.dirname(file)
        os.makedirs(dir, exist_ok=True)
        if self.update:
            print("Creating ... {0} -> {1}".format(url, file))
            with urllib.request.urlopen(url) as rfh:
                with open(file, 'w+') as lfh:
                    lfh.write(rfh.read().decode('utf-8'))
        else:
            if not os.path.exists(file):
                print("Missing ... {0} -> {1}".format(url, file))

if __name__ == "__main__":
    PARGS = OptionParser()

    PARGS.add_option("-u", "--update", dest="update",
                 action="store_true", help="Update symlinks")

    PARGS.add_option("-e", "--env_root", dest="env_root",
                 default = os.getenv('ENV_ROOT', os.getcwd()),
                 help="Update symlinks")

    (OPTS, ARGS) = PARGS.parse_args()

    DATA = (
        # type src   target
        (BuildEnv.LINK_T, "{env}/dotfiles", ".dotfiles"),
        (BuildEnv.LINK_T, "{env}/vim", ".vim"),
        (BuildEnv.LINK_T, "{env}/sbin", "sbin"),
        (BuildEnv.LINK_T, "{env}/terminfo", ".terminfo"),
        (BuildEnv.LINK_T, "{env}/dotfiles/zsh", ".zsh"),
        (BuildEnv.LINK_T, ".dotfiles/zshrc", ".zshrc"),
        (BuildEnv.LINK_T, ".dotfiles/muttrc", ".muttrc"),
        (BuildEnv.LINK_T, ".dotfiles/tmux.conf", ".tmux.conf"),
        (BuildEnv.LINK_T, ".vim/vimrc", ".vimrc"),
        (BuildEnv.DIR_T, "{local_home}/vim", 0o700),
        (BuildEnv.DIR_T, "{local_home}/vim/swap", 0o755),
        (BuildEnv.DIR_T, "{local_home}/backup", 0o700),
        (BuildEnv.DIR_T, "{remote_home}/zsh/history", 0o700),
        (BuildEnv.DOWNLOAD_T, ".vim/autoload/plug.vim", "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"),
    )

    REPLACE = {
        'env': OPTS.env_root,
        'dotfiles': os.path.join(OPTS.env_root, 'dotfiles'),
        'vim': os.path.join(OPTS.env_root, 'vim'),
        'local_home':  "/var/tmp/.major_env",
        'remote_home': "~/.env"
    }

    ENV = BuildEnv(DATA, REPLACE, update = OPTS.update)
    ENV.build()

